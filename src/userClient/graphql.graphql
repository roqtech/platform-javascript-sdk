fragment User on UserModel {
  id
  reference
  firstName
  lastName
  active
  email
  phone
  locale
  isOptedIn
  synced
  tenantId
  customData
  timezone
  avatarUrl
  createdAt
  updatedAt
}

fragment Tenant on TenantModel {
  id
  reference
  isDefault
  name
  createdAt
  updatedAt
}

fragment UserGroup on UserGroupModel {
  id
  reference
  name
  type
}

fragment UserProfile on UserProfileModel {
  id
  reference
  firstName
  lastName
  email
  phone
  locale
  timezone
  avatarUrl
}

fragment UserConnectedProvider on UserConnectedProviderModel {
  id
  name
  authenticationProviderId
}

fragment UserGroupType on UserGroupTypeModel {
  id
  name
  createdAt
  updatedAt
}

fragment Role on RoleModel {
  id
  reference
  description
  isSystemManaged
  key
  name
  reference
}

fragment UserInvite on UserInviteModel {
  acceptedByUserId
  createdAt
  createdByUserId
  data
  email
  firstName
  id
  locale
  lastName
  roleKeys
  status
  statusUpdatedAt
  tenantId
  updatedAt
  userTokenId
}

query userProfile($id: ID!, $withTenant: Boolean = false, $withUserGroups: Boolean = false, $withRoles: Boolean = false) {
  user(id: $id) {
    ...User
    tenant @include(if: $withTenant) {
      ...Tenant
    }
    userGroups @include(if: $withUserGroups) {
      data {
        ...UserGroup
      }
      totalCount
    }
    roles @include(if: $withRoles) {
      data {
        ...Role
      }
      totalCount
    }
  }
}

query userProfiles(
  $filter: UserFilterArgType
  $limit: Int
  $offset: Int
  $order: UserOrderArgType
  $search: UserSearchArgType
  $withTenant: Boolean = false
  $withUserGroups: Boolean = false
  $withRoles: Boolean = false
) {
  users(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...User
      tenant @include(if: $withTenant) {
        ...Tenant
      }
      userGroups @include(if: $withUserGroups) {
        data {
          ...UserGroup
        }
        totalCount
      }
      roles @include(if: $withRoles) {
        data {
          ...Role
        }
        totalCount
      }
    }
    totalCount
  }
}

mutation assignRolesToUser($roleKeys: [String!]!, $userId: ID!) {
  assignRolesToUser(roleKeys: $roleKeys, userId: $userId)
}

mutation updateTenant($id: ID!, $tenant: TenantUpdateDto!) {
  updateTenant(id: $id, tenant: $tenant) {
    ...Tenant
  }
}

mutation createUser($user: UserCreateDto!) {
  createUser(user: $user) {
    ...User
  }
}

mutation unassignRolesFromUser($roleKeys: [String!]!, $userId: ID!) {
  unassignRolesFromUser(roleKeys: $roleKeys, userId: $userId)
}

mutation updateUser($id: ID!, $user: UserUpdateDto!) {
  updateUser(id: $id, user: $user) {
    ...User
  }
}

mutation changeUserPassword($data: ChangeUserPasswordDto!) {
  changeUserPasswordV2(data: $data)
}

mutation verifyPassword($password: String!, $userId: ID!) {
  verifyPassword(password: $password, userId: $userId)
}

mutation sendUserInvites($data: UserInvitesCreateV2Dto!) {
  sendUserInvitesV2(data: $data) {
    success {
      ...UserInvite
    }
    errors {
      email
      error
      firstName
      lastName
    }
  }
}

mutation resendUserInvite($userInviteId: ID!) {
  resendUserInvite(id: $userInviteId) {
    ...UserInvite
  }
}

query userInvites(
  $filter: UserInviteFilterArgType
  $limit: Int
  $offset: Int
  $order: UserInviteOrderArgType
  $search: UserInviteSearchArgType
) {
  userInvites(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...UserInvite
    }
    totalCount
  }
}

query userInvite($id: ID!) {
  userInvite(id: $id) {
    ...UserInvite
  }
}

mutation cancelUserInvite($userInviteId: ID!) {
  cancelUserInvite(id: $userInviteId) {
    ...UserInvite
  }
}

mutation acceptUserInvite($data: AcceptUserInviteV2Dto!) {
  acceptUserInviteV2(data: $data) {
    ...UserInvite
  }
}

mutation sendUserResetPasswordMail($userId: ID!) {
  sendUserResetPasswordMail(userId: $userId)
}
