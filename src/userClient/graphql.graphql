fragment User on UserModel {
  id
  reference
  firstName
  lastName
  active
  email
  phone
  locale
  isOptedIn
  synced
  tenantId
  customData
  timezone
  avatarUrl
  createdAt
  updatedAt
}

fragment Tenant on TenantModel {
  id
  reference
  isDefault
  name
  createdAt
  updatedAt
}

fragment UserGroup on UserGroupModel {
  id
  reference
  name
  type
}

fragment UserProfile on UserProfileModel {
  id
  reference
  firstName
  lastName
  email
  phone
  locale
  timezone
  avatarUrl
}

fragment UserConnectedProvider on UserConnectedProviderModel {
  id
  name
  authenticationProviderId
}

fragment UserGroupType on UserGroupTypeModel {
  id
  name
  createdAt
  updatedAt
}

fragment Role on RoleModel {
  id
  reference
  description
  isSystemManaged
  key
  name
  reference
}

fragment UserInvite on UserInviteModel {
  acceptedByUserId
  createdAt
  createdByUserId
  data
  email
  firstName
  id
  locale
  lastName
  roleKeys
  status
  statusUpdatedAt
  tenantId
  updatedAt
  userTokenId
}

query user($id: ID!, $withTenant: Boolean = false, $withUserGroups: Boolean = false, $withRoles: Boolean = false) {
  user(id: $id) {
    ...User
    tenant @include(if: $withTenant) {
      ...Tenant
    }
    userGroups @include(if: $withUserGroups) {
      data {
        ...UserGroup
      }
      totalCount
    }
    roles @include(if: $withRoles) {
      data {
        ...Role
      }
      totalCount
    }
  }
}

query users(
  $filter: UserFilterArgType
  $limit: Int
  $offset: Int
  $order: UserOrderArgType
  $search: UserSearchArgType
  $withTenant: Boolean = false
  $withUserGroups: Boolean = false
  $withRoles: Boolean = false
) {
  users(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...User
      tenant @include(if: $withTenant) {
        ...Tenant
      }
      userGroups @include(if: $withUserGroups) {
        data {
          ...UserGroup
        }
        totalCount
      }
      roles @include(if: $withRoles) {
        data {
          ...Role
        }
        totalCount
      }
    }
    totalCount
  }
}

query userGroup(
  $id: ID!
  $withUserGroupType: Boolean = false
  $withUsers: Boolean = false
  $withRoles: Boolean = false
) {
  userGroup(id: $id) {
    ...UserGroup
    userGroupType @include(if: $withUserGroupType) {
      ...UserGroupType
    }
    users @include(if: $withUsers) {
      data {
        ...User
      }
      totalCount
    }
    roles @include(if: $withRoles) {
      data {
        ...Role
      }
      totalCount
    }
  }
}

query userGroups(
  $filter: UserGroupFilterArgType
  $limit: Int
  $offset: Int
  $order: UserGroupOrderArgType
  $search: UserGroupSearchArgType
  $withUserGroupType: Boolean = false
  $withUsers: Boolean = false
  $withRoles: Boolean = false
) {
  userGroups(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...UserGroup
      userGroupType @include(if: $withUserGroupType) {
        ...UserGroupType
      }
      users @include(if: $withUsers) {
        data {
          ...User
        }
        totalCount
      }
      roles @include(if: $withRoles) {
        data {
          ...Role
        }
        totalCount
      }
    }
    totalCount
  }
}

query userProfile(
  $id: ID!,
  $withProviders: Boolean = false
) {
  userProfile(id: $id) {
    ...UserProfile
    connectedProviders @include(if: $withProviders){
      ...UserConnectedProvider
    }
  }
}

query userProfiles(
  $filter: UserFilterArgType
  $limit: Int
  $offset: Int
  $order: UserProfileOrderArgType
  $search: UserProfileSearchArgType
  $withProviders: Boolean = false
) {
  userProfiles(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...UserProfile
      connectedProviders @include(if: $withProviders){
        ...UserConnectedProvider
      }
    }
    totalCount
  }
}

query tenant($id: ID!, $withUserCount: Boolean = false) {
  tenant(id: $id) {
    ...Tenant
    users @include(if: $withUserCount) {
      totalCount
    }
  }
}

query tenants(
  $filter: TenantFilterArgType
  $limit: Int
  $offset: Int
  $order: TenantOrderArgType
  $withUserCount: Boolean = false
) {
  tenants(filter: $filter, limit: $limit, offset: $offset, order: $order) {
    data {
      ...Tenant
      users @include(if: $withUserCount) {
        totalCount
      }
    }
    totalCount
  }
}

query role($id: ID!, $withUserCount: Boolean = false, $withUserGroups: Boolean = false) {
  role(id: $id) {
    ...Role
    userGroups @include(if: $withUserGroups) {
      data {
        ...UserGroup
      }
      totalCount
    }
    users @include(if: $withUserCount) {
      totalCount
    }
  }
}

query roles(
  $filter: RoleFilterArgType
  $limit: Int
  $offset: Int
  $order: RoleOrderArgType
  $withUserCount: Boolean = false
  $withUserGroups: Boolean = false
) {
  roles(filter: $filter, limit: $limit, offset: $offset, order: $order) {
    data {
      ...Role
      userGroups @include(if: $withUserGroups) {
        data {
          ...UserGroup
        }
        totalCount
      }
      users @include(if: $withUserCount) {
        totalCount
      }
    }
    totalCount
  }
}

mutation addUsersToUserGroup($userGroupId: ID!, $userIds: [ID!]!) {
  addUsersToUserGroup(userGroupId: $userGroupId, userIds: $userIds)
}

mutation assignRolesToUser($roleKeys: [String!]!, $userId: ID!) {
  assignRolesToUser(roleKeys: $roleKeys, userId: $userId)
}

mutation buildQueryPlan($entity: String!, $operation: ResourceOperationEnum!) {
  buildQueryPlan(entity: $entity, operation: $operation) {
    kind
    queryPlan
  }
}

mutation createTenant($tenant: TenantCreateDto!) {
  createTenant(tenant: $tenant) {
    ...Tenant
  }
}

mutation updateTenant($id: ID!, $tenant: TenantUpdateDto!) {
  updateTenant(id: $id, tenant: $tenant) {
    ...Tenant
  }
}

mutation createUser($user: UserCreateDto!) {
  createUser(user: $user) {
    ...User
  }
}

mutation createUserGroup($userGroup: UserGroupCreateDto!) {
  createUserGroup(userGroup: $userGroup) {
    ...UserGroup
  }
}

mutation removeUsersFromUserGroup($userGroupId: ID!, $userIds: [ID!]!) {
  removeUsersFromUserGroup(userGroupId: $userGroupId, userIds: $userIds)
}

mutation unassignRolesFromUser($roleKeys: [String!]!, $userId: ID!) {
  unassignRolesFromUser(roleKeys: $roleKeys, userId: $userId)
}

mutation updateUser($id: ID!, $user: UserUpdateDto!) {
  updateUser(id: $id, user: $user) {
    ...User
  }
}

mutation updateUserGroup($id: ID!, $userGroup: UserGroupUpdateDto!) {
  updateUserGroup(id: $id, userGroup: $userGroup) {
    ...UserGroup
  }
}

mutation changeUserPassword($id: ID!, $input: UserPasswordUpdateDto!) {
  changeUserPassword(id: $id, input: $input)
}

mutation verifyPassword($password: String!, $userId: ID!) {
  verifyPassword(password: $password, userId: $userId)
}

mutation sendUserInvites($userInvites: UserInvitesCreateDto!) {
  sendUserInvites(userInvites: $userInvites) {
    success {
      ...UserInvite
    }
    errors {
      email
      error
      firstName
      lastName
    }
  }
}

mutation resendUserInvite($userInviteId: ID!) {
  resendUserInvite(id: $userInviteId) {
    ...UserInvite
  }
}

query userInvites(
  $filter: UserInviteFilterArgType
  $limit: Int
  $offset: Int
  $order: UserInviteOrderArgType
  $search: UserInviteSearchArgType

) {
  userInvites(filter: $filter, limit: $limit, offset: $offset, order: $order, search: $search) {
    data {
      ...UserInvite
    }
    totalCount
  }
}

query userInvite($id: ID!) {
  userInvite(id: $id) {
    ...UserInvite
  }
}

mutation cancelUserInvite($userInviteId: ID!) {
  cancelUserInvite(id: $userInviteId) {
    ...UserInvite
  }
}

mutation acceptUserInvite($acceptUserInvite: AcceptUserInviteDto!) {
  acceptUserInvite(acceptUserInvite: $acceptUserInvite) {
    ...UserInvite
  }
}

mutation updateUserInvite($id: ID!, $userInvite:UserInviteUpdateDto!) {
  updateUserInvite(id: $id, userInvite:$userInvite) {
    ...UserInvite
  }
}

mutation sendUserResetPasswordMail($userId:ID!){
  sendUserResetPasswordMail(userId: $userId)
}
